@startuml
'https://plantuml.com/sequence-diagram

autonumber

participant data as controller
participant time_award_config_controller as service
entity ._mustGet_dao as dao
participant GetFromRedis_model as GetFromRedis
participant SyncFromRedis_model as SyncFromRedis
database redis
database postgre as db

controller -> service ++ : timeAwardConfig--info
service -> dao ++ : redis.Conn,engine
dao -> GetFromRedis ++ : redisKey string,redis.Conn
group 对缓存进行的GET操作
    GetFromRedis -> GetFromRedis : if rediskey == ""
    GetFromRedis -> redis++ : redis.Byte(conn.Do("GET",rediskey))
    GetFromRedis <-- redis : if e == redis.ErrNil \nor\nif e !=redis.ErrNil

    GetFromRedis <-- redis --++ : buf
    GetFromRedis --> GetFromRedis --: if string(buf) == "DISABLE" \n之前已经查找了缓存也查找了数据库都不存在\nerror="not found redis nor db"
end
dao <- GetFromRedis -- : []byte,error

dao --> dao : if e="not found redis nor db"\n缓存中和数据库中都未找到
dao --> dao ++ : if e!=nil \n缓存获取失败\n去找数据库
dao -> db ++ : engine.Count(&count)

group 防止缓存穿透
    dao <-- db ++ : if count == 0 \n数据库中不存在\n需要设置DISABLE\n防止缓存穿透
    dao -> redis -- : conn.Do("SET",rediskey,"DISABLE","NX") \nor\n conn.Do("SET",rediskey,"DISABLE","EX",time,"NX")
end
dao <-- db: if count != 0
dao -> db : engine.First(&o)
deactivate db

group 同步缓存
    dao -> SyncFromRedis ++ : redis.Conn
    SyncFromRedis --> SyncFromRedis: if rediskey == ""
    SyncFromRedis -> SyncFromRedis: json.Marshal()
    SyncFromRedis -> redis  : conn.Do("SET",value, "EX",time)
    dao <- SyncFromRedis -- : error
    deactivate
end
service <- dao -- : error
controller <- service : success or fail
@enduml